# Docker Compose configuration for ChatDocs application

services:

  postgresql:
    image: postgres:14.18
    container_name: chatdocs-postgresql
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  vectorstore:
    image: chromadb/chroma:1.0.16.dev100
    container_name: chatdocs-vectorstore
    ports:
      - "${CHROMADB_PORT}:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chroma_data:/data
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/api/v2/heartbeat || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    image: chatdocs-backend:latest
    build:
      context: .
      dockerfile: dockerfiles/backend.Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    command: uvicorn src.backend.main:app --host 0.0.0.0 --port ${BACKEND_PORT} --reload
    container_name: chatdocs-backend
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - POSTGRES_HOST=postgresql
      - CHROMADB_HOST=vectorstore
      - CHROMADB_PORT=8000
      - POSTGRES_PORT=5432
    volumes:
      - .:/app
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - postgresql
      - vectorstore
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s

  frontend:
    image: chatdocs-frontend:latest
    build:
      context: .
      dockerfile: dockerfiles/frontend.Dockerfile
    ports:
      - "${FRONTEND_PORT}:8501"
    working_dir: /app/src/ui
    command: streamlit run app.py --server.port ${FRONTEND_PORT} --server.address 0.0.0.0 --server.enableCORS=false
    container_name: chatdocs-frontend
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT}
    volumes:
      - .:/app
    restart: unless-stopped
    depends_on:
      - backend
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT}"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s

volumes:
  chroma_data:
    driver: local
  postgresql_data:
    driver: local

networks:
  default:
    name: chatdocs-network